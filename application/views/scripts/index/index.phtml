<?php ?>

<div id="countriesCloud">
	<h2>Countries</h2>
	<ul id="countriesList"></ul>
</div>

<div id="seriesCloud">
	<h2>Series</h2>
	<ul id="seriesList"></ul>
</div>

<div id="mugsCloud">
	<h2>Mugs</h2>
	<ul id="mugsList"></ul>
</div>

<script type="text/javascript">  
// User panel initialization
// http://web-kreation.com/index.php/tutorials/nice-clean-sliding-login-panel-built-with-jquery/
jQuery(document).ready( function() {
	$("#panelOpenLink").click(function(){
		$("div#panel").slideDown("slow");
	});	
	
	$("#panelCloseLink").click(function(){
		$("div#panel").slideUp("slow");	
	});		

	$("#toggle a").click(function () {
		$("#toggle a").toggle();
	});
});
</script> 

<script type="text/javascript"> 
	$("#userSettings input").button().change( function(e) {
		// Need some workaround to serialize ALL buttons, checked and unchecked
		var settingsForm = $("#userSettings input");
		var uncheckedButtons = [];
		
		settingsForm.filter(':checkbox:not(:checked)').each(function () {
			uncheckedButtons.push(encodeURIComponent(this.name) + '=off');
		});
		var serial = settingsForm.serialize() +
					 (uncheckedButtons.length ? '&' + uncheckedButtons.join('&').replace(/%20/g, "+") : '');

		$.post("api/update-settings", serial, function(response) {
			if (response.status == "fail") {
				$.showMessage(response.message, 'ui-state-error');
			};
			if (response.status == "success") {
				$.showMessage(response.message);
				switch (e.target.id) {
					case 'userShowOnlyOwnMugs':
						// Надо перезапрашивать списки, так как меняется список стран и серий
						ReloadCountries();
						ReloadSeries();
						$('#mugsList').empty();
						break;
					case 'userShowMugsCount':
						// Надо перерисовывать списки, так как меняется ширина выводимых строк
						ReloadCountries();
						ReloadSeries();
						$('#mugsList').empty();
						break;
					default:
						alert('Not defined setting. Please contact author');
				}
			};
		});
	});
</script>

<script type="text/javascript">
$(function() {
	// Настраиваем все элементы так, чтобы при выборе одного все остальные освобождались
	$('body').on('click', '#countriesList li', function() {
		$('#countriesCloud').data('selected', $(this).data('id'));
		ReloadSeries();
		ReloadMugs();
	});

	ReloadCountries();
	ReloadSeries();
	// We don't load mugs list on initialization because of it's length
});

function ReloadCountries() {
	// Сначала разбираемся с настройками пользователя, если он есть
	var userShowOnlyOwnMugs;
	var userShowMugsCount;
	var userLoggedIn = ($('#userSettings').length == 1);
	
	if ( userLoggedIn ) {
		userShowOnlyOwnMugs = $('#userShowOnlyOwnMugs').is(':checked');
		userShowMugsCount = $('#userShowMugsCount').is(':checked');
	} else {
		userShowOnlyOwnMugs = false;
		userShowMugsCount = false;
	}

	// Запрашиваем список стран с количествами кружек. Сервер отдает список в двух вариантах
	// 1. Если пользователя нет, то возвращается список всех стран с количеством кружек в них
	// 2. Если пользователь есть, то возвращается список всех стран с количеством кружек в них и у пользователя
	// Как следствие, иногда надо пропускать кружки. Делаем это для mugsUserCount == 0
	// Кстати, незачем городить огород и возвращать этот столбец, если нет пользователя
    $.getJSON("api/countries", function(data) {
    	$('#countriesList').empty();
		$.each(data, function() {
			if ( userShowOnlyOwnMugs && this.mugsUserCount == 0 ) return;
			var li = $("<li>");
			if ( userShowOnlyOwnMugs && userShowMugsCount ) {
				// userShowOnlyOwnMugs checked on server so we get a shortlist here
				li.text(this.countryName + ' (' + this.mugsUserCount + '/' + this.mugsCountryCount + ')');
				li.data('mugsCount', this.mugsUserCount)
			} else if ( userShowOnlyOwnMugs && !userShowMugsCount) {
				// userShowOnlyOwnMugs checked on server so we get a shortlist here
				li.text(this.countryName);
				li.data('mugsCount', this.mugsUserCount);
			} else if ( !userShowOnlyOwnMugs && userShowMugsCount) {
				li.text(this.countryName + ' (' + this.mugsUserCount + '/' + this.mugsCountryCount + ')');
				li.data('mugsCount', this.mugsCountryCount)
			} else {
				li.text(this.countryName);
				li.data('mugsCount', this.mugsCountryCount)
			}
			if ( userLoggedIn && this.mugsUserCount == 0 ) li.css('color', 'gray');
			li.data('id', this.id);
			li.appendTo('#countriesList');
		});
		ResizeTags( $('#countriesList li') );
	});
}

function ReloadSeries() {	
	// Запрашиваем список стран с количествами кружек
    $.getJSON("api/series", function(data) {
    	$('#seriesList').empty();
		$.each(data, function() { 
			$("<li>").text(this.serieName)
					 .data('id', this.id)
					 .data('mugsCount', this.mugsCount)
					 .appendTo('#seriesList');  
		});
		ResizeTags( $('#seriesList li') );
	});
}	

function ReloadMugs() {
	var selectedCountry = $('#countriesCloud').data('selected') || '';

	// Сначала разбираемся с настройками пользователя, если он есть
	// TODO: Почистить, если не используется
	var userShowOnlyOwnMugs;
	var userShowMugsCount;
	var userLoggedIn = ($('#userSettings').length == 1);
	
	if ( userLoggedIn ) {
		userShowOnlyOwnMugs = $('#userShowOnlyOwnMugs').is(':checked');
		userShowMugsCount = $('#userShowMugsCount').is(':checked');
	} else {
		userShowOnlyOwnMugs = false;
		userShowMugsCount = false;
	}

	// Запрашиваем список кружек
    $.getJSON('api/mugs', { countryId: selectedCountry }, function(data) {
    	$('#mugsList').empty();
		$.each(data, function() {
			var li = $("<li>");
			li.text(this.countryName + ' - ' + this.serieName + ' - ' + this.mugName)
			  .data('id', this.id);
			if ( userLoggedIn && this.mugUserStatus == null ) li.css('color', 'gray');
			li.appendTo('#mugsList');  
		});
	});
}


function ResizeTags (li) {
	var countMin = 0, countMax = 0;
	var sizeMin = 1.0, sizeMax = 2.5;		// Размеры в .em в пропорции от кол-ва кружек
	
	$(li).each(function() {
		var intMugsCount = parseInt( $(this).data('mugsCount') );
		if ( intMugsCount > countMax ) { countMax = intMugsCount };
		if ( intMugsCount < countMin || countMin == 0 ) { countMin = intMugsCount };
	});
	
	if ( countMax > countMin ) {
		$(li).each(function() {
			var intMugsCount = parseInt( $(this).data('mugsCount') );
			var countProportion = (intMugsCount - countMin) / (countMax - countMin);
			var sizeNew = sizeMin + (sizeMax - sizeMin) * countProportion;
			$(this).animate( {fontSize: sizeNew + 'em'} );
		});
	};
}
</script> 
