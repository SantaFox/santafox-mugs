<?php ?>

<ol id="tasks">
	<li id="task1">Загрузка списка стран</li>
	<li id="task2">Загрузка списка серий</li>
	<li id="task3">Загрузка списка кружек</li>
	<li id="task4">Загрузка исходных данных с сайта</li>
	<li id="task5">Анализ списка стран</li>
	<li id="task6">Анализ списка серий</li>
	<li id="task7">Анализ списка кружек</li>
</ol>

<table><tbody  style="vertical-align: top;"><tr>
<td><h2>Countries to be Added to database</h2><ol id="countries2Add"></ol></td>
<td><h2>Countries to be Deleted from database</h2><ol id="countries2Delete"></ol></td>
</tr><tr>
<td><h2>Series to be Added to database</h2><ol id="series2Add"></ol></td>
<td><h2>Series to be Deleted from database</h2><ol id="series2Delete"></ol></td>
</tr><tr>
<td><h2>Mugs to be Added to database</h2><ol id="mugs2Add"></ol></td>
<td><h2>Mugs to be Deleted from database</h2><ol id="mugs2Delete"></ol></td>
</tr></tbody></table>

<script type="text/javascript">
/*
 * ArrayIndexOf(a, fnc) takes two parameters:
 *	- the array
 *	- a function of signature: bool f(item) {}
 *
 * ArrayIndexOf compares each array item with, well, whatever you want,
 * and returns the index of the item in the array, or -1 if there is no match.
 * This approach gives you the flexibility to search for whatever specific field, or fields, you desire.
*/
function ArrayIndexOf(a, fnc) {
	if (!fnc || typeof (fnc) != 'function') {
		return -1;
	}

	if (!a || !a.length || a.length < 1) return -1;
	for (var i = 0; i < a.length; i++) {
		if (fnc(a[i])) return i;
	}
	return -1;
}
</script>

<script type="text/javascript">
$(function() {
	var baseCountries = [];
	var baseSeries = [];
	var baseMugs = [];
	var wikiMugs = [];
	
	// Добавляем обработку для того, чтобы все анализы запускались только после успешного
	// выполнения всех AJAX запросов
	$.when(
	$.ajax({
		url: '/admin/countries',
		dataType: 'json',
		beforeSend: function() {
			$('<span>...</span>').appendTo('#task1');
		},
		success: function(data) {
			$.each(data, function(index, value) { 
				baseCountries.push(value);
			});
			$('<span>выполнено</span>').appendTo('#task1');
		}
	}),
	$.ajax({
		url: '/admin/series',
		dataType: 'json',
		beforeSend: function() {
			$('<span>...</span>').appendTo('#task2');
		},
		success: function(data) {
			$.each(data, function(index, value) { 
				baseSeries.push(value);
			});
			$('<span>выполнено</span>').appendTo('#task2');
		}
	}),
	$.ajax({
		url: '/admin/mugs',
		dataType: 'json',
		beforeSend: function() {
			$('<span>...</span>').appendTo('#task3');
		},
		success: function(data) {
			$.each(data, function(index, value) { 
				baseMugs.push(value);
			});
			$('<span>выполнено</span>').appendTo('#task3');
		}
	}),
	$.ajax({
		url: '/admin/proxy',
		type: 'get',
		dataType: 'text',
		beforeSend: function() {
			$('<span>...</span>').appendTo('#task4');
		},
		success: function(data)
		{ 
			// Перед вызовом jQuery(data) стоит стоит очистить текстовую строку data от заголовоков,
			// к примеру взять только содержимое тега <body>, но сделать это исключительно строковыми
			// функциями.
			data = data.substring(data.indexOf('<body'));		// Убираем кусок до <body>
			data = data.substring(0, data.indexOf('</body>')+7);		// и после
			var html = $(data);

			var s1 = $('span#Countries_\\.26_Cities_Starbucks_Mug_Series', html).parent();	// Элемент-заголовок списка
			var s2 = s1.nextUntil("h2");
			$('b', s2).each( function() {
				var currentCountry = $(this).text();
				
				var s3 = $(this).parent().nextUntil('p,h2')		// обычно два <ul> с сериями. <h2> требуется в конце списка
				s3.each( function() {
					var currentSerie = $.trim($('li', this).first().contents()[0].nodeValue);
					$('li', this).slice(1).each( function() {
						var newMug = { country: currentCountry, serie: currentSerie, name: $(this).text().trim() };
						wikiMugs.push( newMug );
					});
				});
			});
			/*
			jQuery.each(mugs, function() {
				var li = $('<li>');
				li.text(this.country + ' - ' + this.serie + ' - ' + this.name).appendTo('#countries');
			});
			*/
			$('<span>выполнено</span>').appendTo('#task4');
		}
	})
	).then(function() {
		// анализ стран
    	$('<span>...</span>').appendTo('#task5');
    	var countries2Add = [];
    	
    	$.each(wikiMugs, function(index, wikiMug) {
    		var indexCountryId = ArrayIndexOf(baseCountries, function(obj) {
    			var itemFound = obj.countryName.toUpperCase() == wikiMug.country.toUpperCase() ||
					   (obj.countryAcquireAlias != null && obj.countryAcquireAlias.toUpperCase() == wikiMug.country.toUpperCase());
				if (itemFound) obj.usedCount = (obj.usedCount || 0) + 1;
				return itemFound;
			});
    		if (indexCountryId > -1) {
    			this.countryId = baseCountries[indexCountryId].id;
    		} else {
    			if (-1 == $.inArray(this.country, countries2Add)) {
    				countries2Add.push(this.country);
    			}
    		}
    	});
    	$.each(countries2Add, function(index, value) {
			var li = $('<li>');
			li.text(value).appendTo('#countries2Add');
		});
		$.each(baseCountries, function(index, value) {
			if ( 0 == (value.usedCount || 0) ) {
				var li = $('<li>');
				li.text(value.countryName).appendTo('#countries2Delete');
			}
		});
		$('<span>выполнено</span>').appendTo('#task5');
		
		// анализ серий
		$('<span>...</span>').appendTo('#task6');
    	var series2Add = [];
    	
    	$.each(wikiMugs, function(index, wikiMug) {
    		var indexSerieId = ArrayIndexOf(baseSeries, function(obj) {
				var itemFound = obj.serieName.toUpperCase() == wikiMug.serie.toUpperCase() ||
					   (obj.serieAcquireAlias != null && obj.serieAcquireAlias.toUpperCase() == wikiMug.serie.toUpperCase());
				if (itemFound) obj.usedCount = (obj.usedCount || 0) + 1;
				return itemFound;
			});
    		if (indexSerieId > -1) {
    			this.serieId = baseSeries[indexSerieId].id;
    		} else {
    			if (-1 == $.inArray(this.serie, series2Add)) {
    				series2Add.push(this.serie);
    			}
    		}
    	});
    	$.each(series2Add, function(index, value) {
			var li = $('<li>');
			li.text(value).appendTo('#series2Add');
		});
		$.each(baseSeries, function(index, value) {
			if ( 0 == (value.usedCount || 0) ) {
				var li = $('<li>');
				li.text(value.countryName).appendTo('#series2Delete');
			}
		});
		$('<span>выполнено</span>').appendTo('#task6');

		// анализ самих кружек
		$('<span>...</span>').appendTo('#task7');
    	var mugs2Add = [];
    	
    	$.each(wikiMugs, function(index, wikiMug) {
    		var indexMugId = ArrayIndexOf(baseMugs, function(obj) {
				var itemFound = obj.mugName.toUpperCase() == wikiMug.name.toUpperCase() &&
					   			obj.mugSerieId == wikiMug.serieId &&
					   			obj.mugCountryId == wikiMug.countryId;
				if (itemFound) obj.usedCount = (obj.usedCount || 0) + 1;
				return itemFound;
			});
    		if (indexMugId > -1) {
    			// Если кружка нашлась - все хорошо, ничего не делаем
    		} else {
    			// Можно не делать проверку, так как в вики по идее кружки уникальны
    			if (-1 == $.inArray(this, mugs2Add)) {
    				mugs2Add.push(this);
    			}
    		}
    	});
    	$.each(mugs2Add, function(index, value) {
    		if (value.countryId !== undefined && value.serieId !== undefined) {		// Если страна или серия не найдена, то добавлять все равно нельзя
				var li = $('<li>');
				li.text(value.country + ' (' + value.countryId + ') - '
					  + value.serie + ' (' + value.serieId + ') - '
					  + value.name).appendTo('#mugs2Add');
			}
		});
		$.each(baseMugs, function(index, value) {
			if ( 0 == (value.usedCount || 0)) {
				var li = $('<li>');
				li.text(value.mugCountryId + ' - '
					  + value.mugSerieId + ' - '
					  + value.mugName).appendTo('#mugs2Delete');
				}
		});
		$('<span>выполнено</span>').appendTo('#task7');
	});

});
</script>